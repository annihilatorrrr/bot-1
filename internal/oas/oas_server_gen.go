// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AcquireTelegramAccount implements acquireTelegramAccount operation.
	//
	// Acquire telegram account.
	//
	// POST /api/telegram/account/acquire
	AcquireTelegramAccount(ctx context.Context, req *AcquireTelegramAccountReq) (*AcquireTelegramAccountOK, error)
	// GetHealth implements getHealth operation.
	//
	// Get health.
	//
	// GET /api/health
	GetHealth(ctx context.Context) (*Health, error)
	// HeartbeatTelegramAccount implements heartbeatTelegramAccount operation.
	//
	// Heartbeat telegram account.
	//
	// GET /api/telegram/account/heartbeat/{token}
	HeartbeatTelegramAccount(ctx context.Context, params HeartbeatTelegramAccountParams) error
	// ReceiveTelegramCode implements receiveTelegramCode operation.
	//
	// Receive telegram code.
	//
	// GET /api/telegram/code/receive/{token}
	ReceiveTelegramCode(ctx context.Context, params ReceiveTelegramCodeParams) (*ReceiveTelegramCodeOK, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
