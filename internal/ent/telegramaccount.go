// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/gotd/bot/internal/ent/telegramaccount"
)

// TelegramAccount is the model entity for the TelegramAccount schema.
type TelegramAccount struct {
	config `json:"-"`
	// ID of the ent.
	// Phone number without +
	ID string `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code *string `json:"code,omitempty"`
	// CodeAt holds the value of the "code_at" field.
	CodeAt *time.Time `json:"code_at,omitempty"`
	// State holds the value of the "state" field.
	State telegramaccount.State `json:"state,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Session holds the value of the "session" field.
	Session      *[]byte `json:"session,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TelegramAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case telegramaccount.FieldSession:
			values[i] = new([]byte)
		case telegramaccount.FieldID, telegramaccount.FieldCode, telegramaccount.FieldState, telegramaccount.FieldStatus:
			values[i] = new(sql.NullString)
		case telegramaccount.FieldCodeAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TelegramAccount fields.
func (ta *TelegramAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telegramaccount.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ta.ID = value.String
			}
		case telegramaccount.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ta.Code = new(string)
				*ta.Code = value.String
			}
		case telegramaccount.FieldCodeAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field code_at", values[i])
			} else if value.Valid {
				ta.CodeAt = new(time.Time)
				*ta.CodeAt = value.Time
			}
		case telegramaccount.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				ta.State = telegramaccount.State(value.String)
			}
		case telegramaccount.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ta.Status = value.String
			}
		case telegramaccount.FieldSession:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field session", values[i])
			} else if value != nil {
				ta.Session = value
			}
		default:
			ta.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TelegramAccount.
// This includes values selected through modifiers, order, etc.
func (ta *TelegramAccount) Value(name string) (ent.Value, error) {
	return ta.selectValues.Get(name)
}

// Update returns a builder for updating this TelegramAccount.
// Note that you need to call TelegramAccount.Unwrap() before calling this method if this TelegramAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ta *TelegramAccount) Update() *TelegramAccountUpdateOne {
	return NewTelegramAccountClient(ta.config).UpdateOne(ta)
}

// Unwrap unwraps the TelegramAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ta *TelegramAccount) Unwrap() *TelegramAccount {
	_tx, ok := ta.config.driver.(*txDriver)
	if !ok {
		panic("ent: TelegramAccount is not a transactional entity")
	}
	ta.config.driver = _tx.drv
	return ta
}

// String implements the fmt.Stringer.
func (ta *TelegramAccount) String() string {
	var builder strings.Builder
	builder.WriteString("TelegramAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ta.ID))
	if v := ta.Code; v != nil {
		builder.WriteString("code=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := ta.CodeAt; v != nil {
		builder.WriteString("code_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", ta.State))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ta.Status)
	builder.WriteString(", ")
	if v := ta.Session; v != nil {
		builder.WriteString("session=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TelegramAccounts is a parsable slice of TelegramAccount.
type TelegramAccounts []*TelegramAccount
