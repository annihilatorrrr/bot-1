// Code generated by ent, DO NOT EDIT.

package telegramaccount

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the telegramaccount type in the database.
	Label = "telegram_account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCodeAt holds the string denoting the code_at field in the database.
	FieldCodeAt = "code_at"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSession holds the string denoting the session field in the database.
	FieldSession = "session"
	// Table holds the table name of the telegramaccount in the database.
	Table = "telegram_accounts"
)

// Columns holds all SQL columns for telegramaccount fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldCodeAt,
	FieldState,
	FieldStatus,
	FieldSession,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// State defines the type for the "state" enum field.
type State string

// StateNew is the default value of the State enum.
const DefaultState = StateNew

// State values.
const (
	StateNew      State = "New"
	StateCodeSent State = "CodeSent"
	StateActive   State = "Active"
	StateError    State = "Error"
)

func (s State) String() string {
	return string(s)
}

// StateValidator is a validator for the "state" field enum values. It is called by the builders before save.
func StateValidator(s State) error {
	switch s {
	case StateNew, StateCodeSent, StateActive, StateError:
		return nil
	default:
		return fmt.Errorf("telegramaccount: invalid enum value for state field: %q", s)
	}
}

// OrderOption defines the ordering options for the TelegramAccount queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByCodeAt orders the results by the code_at field.
func ByCodeAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeAt, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
