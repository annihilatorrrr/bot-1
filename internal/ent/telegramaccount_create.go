// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gotd/bot/internal/ent/telegramaccount"
)

// TelegramAccountCreate is the builder for creating a TelegramAccount entity.
type TelegramAccountCreate struct {
	config
	mutation *TelegramAccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (tac *TelegramAccountCreate) SetCode(s string) *TelegramAccountCreate {
	tac.mutation.SetCode(s)
	return tac
}

// SetCodeAt sets the "code_at" field.
func (tac *TelegramAccountCreate) SetCodeAt(t time.Time) *TelegramAccountCreate {
	tac.mutation.SetCodeAt(t)
	return tac
}

// SetData sets the "data" field.
func (tac *TelegramAccountCreate) SetData(b []byte) *TelegramAccountCreate {
	tac.mutation.SetData(b)
	return tac
}

// SetState sets the "state" field.
func (tac *TelegramAccountCreate) SetState(t telegramaccount.State) *TelegramAccountCreate {
	tac.mutation.SetState(t)
	return tac
}

// SetStatus sets the "status" field.
func (tac *TelegramAccountCreate) SetStatus(s string) *TelegramAccountCreate {
	tac.mutation.SetStatus(s)
	return tac
}

// SetID sets the "id" field.
func (tac *TelegramAccountCreate) SetID(s string) *TelegramAccountCreate {
	tac.mutation.SetID(s)
	return tac
}

// Mutation returns the TelegramAccountMutation object of the builder.
func (tac *TelegramAccountCreate) Mutation() *TelegramAccountMutation {
	return tac.mutation
}

// Save creates the TelegramAccount in the database.
func (tac *TelegramAccountCreate) Save(ctx context.Context) (*TelegramAccount, error) {
	return withHooks(ctx, tac.sqlSave, tac.mutation, tac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tac *TelegramAccountCreate) SaveX(ctx context.Context) *TelegramAccount {
	v, err := tac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tac *TelegramAccountCreate) Exec(ctx context.Context) error {
	_, err := tac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tac *TelegramAccountCreate) ExecX(ctx context.Context) {
	if err := tac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tac *TelegramAccountCreate) check() error {
	if _, ok := tac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "TelegramAccount.code"`)}
	}
	if _, ok := tac.mutation.CodeAt(); !ok {
		return &ValidationError{Name: "code_at", err: errors.New(`ent: missing required field "TelegramAccount.code_at"`)}
	}
	if _, ok := tac.mutation.Data(); !ok {
		return &ValidationError{Name: "data", err: errors.New(`ent: missing required field "TelegramAccount.data"`)}
	}
	if _, ok := tac.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "TelegramAccount.state"`)}
	}
	if v, ok := tac.mutation.State(); ok {
		if err := telegramaccount.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "TelegramAccount.state": %w`, err)}
		}
	}
	if _, ok := tac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TelegramAccount.status"`)}
	}
	return nil
}

func (tac *TelegramAccountCreate) sqlSave(ctx context.Context) (*TelegramAccount, error) {
	if err := tac.check(); err != nil {
		return nil, err
	}
	_node, _spec := tac.createSpec()
	if err := sqlgraph.CreateNode(ctx, tac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TelegramAccount.ID type: %T", _spec.ID.Value)
		}
	}
	tac.mutation.id = &_node.ID
	tac.mutation.done = true
	return _node, nil
}

func (tac *TelegramAccountCreate) createSpec() (*TelegramAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &TelegramAccount{config: tac.config}
		_spec = sqlgraph.NewCreateSpec(telegramaccount.Table, sqlgraph.NewFieldSpec(telegramaccount.FieldID, field.TypeString))
	)
	_spec.OnConflict = tac.conflict
	if id, ok := tac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tac.mutation.Code(); ok {
		_spec.SetField(telegramaccount.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tac.mutation.CodeAt(); ok {
		_spec.SetField(telegramaccount.FieldCodeAt, field.TypeTime, value)
		_node.CodeAt = value
	}
	if value, ok := tac.mutation.Data(); ok {
		_spec.SetField(telegramaccount.FieldData, field.TypeBytes, value)
		_node.Data = value
	}
	if value, ok := tac.mutation.State(); ok {
		_spec.SetField(telegramaccount.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := tac.mutation.Status(); ok {
		_spec.SetField(telegramaccount.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramAccount.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramAccountUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (tac *TelegramAccountCreate) OnConflict(opts ...sql.ConflictOption) *TelegramAccountUpsertOne {
	tac.conflict = opts
	return &TelegramAccountUpsertOne{
		create: tac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tac *TelegramAccountCreate) OnConflictColumns(columns ...string) *TelegramAccountUpsertOne {
	tac.conflict = append(tac.conflict, sql.ConflictColumns(columns...))
	return &TelegramAccountUpsertOne{
		create: tac,
	}
}

type (
	// TelegramAccountUpsertOne is the builder for "upsert"-ing
	//  one TelegramAccount node.
	TelegramAccountUpsertOne struct {
		create *TelegramAccountCreate
	}

	// TelegramAccountUpsert is the "OnConflict" setter.
	TelegramAccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCode sets the "code" field.
func (u *TelegramAccountUpsert) SetCode(v string) *TelegramAccountUpsert {
	u.Set(telegramaccount.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TelegramAccountUpsert) UpdateCode() *TelegramAccountUpsert {
	u.SetExcluded(telegramaccount.FieldCode)
	return u
}

// SetCodeAt sets the "code_at" field.
func (u *TelegramAccountUpsert) SetCodeAt(v time.Time) *TelegramAccountUpsert {
	u.Set(telegramaccount.FieldCodeAt, v)
	return u
}

// UpdateCodeAt sets the "code_at" field to the value that was provided on create.
func (u *TelegramAccountUpsert) UpdateCodeAt() *TelegramAccountUpsert {
	u.SetExcluded(telegramaccount.FieldCodeAt)
	return u
}

// SetData sets the "data" field.
func (u *TelegramAccountUpsert) SetData(v []byte) *TelegramAccountUpsert {
	u.Set(telegramaccount.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramAccountUpsert) UpdateData() *TelegramAccountUpsert {
	u.SetExcluded(telegramaccount.FieldData)
	return u
}

// SetState sets the "state" field.
func (u *TelegramAccountUpsert) SetState(v telegramaccount.State) *TelegramAccountUpsert {
	u.Set(telegramaccount.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TelegramAccountUpsert) UpdateState() *TelegramAccountUpsert {
	u.SetExcluded(telegramaccount.FieldState)
	return u
}

// SetStatus sets the "status" field.
func (u *TelegramAccountUpsert) SetStatus(v string) *TelegramAccountUpsert {
	u.Set(telegramaccount.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TelegramAccountUpsert) UpdateStatus() *TelegramAccountUpsert {
	u.SetExcluded(telegramaccount.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramAccountUpsertOne) UpdateNewValues() *TelegramAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(telegramaccount.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TelegramAccountUpsertOne) Ignore() *TelegramAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramAccountUpsertOne) DoNothing() *TelegramAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramAccountCreate.OnConflict
// documentation for more info.
func (u *TelegramAccountUpsertOne) Update(set func(*TelegramAccountUpsert)) *TelegramAccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *TelegramAccountUpsertOne) SetCode(v string) *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TelegramAccountUpsertOne) UpdateCode() *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateCode()
	})
}

// SetCodeAt sets the "code_at" field.
func (u *TelegramAccountUpsertOne) SetCodeAt(v time.Time) *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetCodeAt(v)
	})
}

// UpdateCodeAt sets the "code_at" field to the value that was provided on create.
func (u *TelegramAccountUpsertOne) UpdateCodeAt() *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateCodeAt()
	})
}

// SetData sets the "data" field.
func (u *TelegramAccountUpsertOne) SetData(v []byte) *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramAccountUpsertOne) UpdateData() *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateData()
	})
}

// SetState sets the "state" field.
func (u *TelegramAccountUpsertOne) SetState(v telegramaccount.State) *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TelegramAccountUpsertOne) UpdateState() *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateState()
	})
}

// SetStatus sets the "status" field.
func (u *TelegramAccountUpsertOne) SetStatus(v string) *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TelegramAccountUpsertOne) UpdateStatus() *TelegramAccountUpsertOne {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TelegramAccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramAccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramAccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TelegramAccountUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TelegramAccountUpsertOne.ID is not supported by MySQL driver. Use TelegramAccountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TelegramAccountUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TelegramAccountCreateBulk is the builder for creating many TelegramAccount entities in bulk.
type TelegramAccountCreateBulk struct {
	config
	err      error
	builders []*TelegramAccountCreate
	conflict []sql.ConflictOption
}

// Save creates the TelegramAccount entities in the database.
func (tacb *TelegramAccountCreateBulk) Save(ctx context.Context) ([]*TelegramAccount, error) {
	if tacb.err != nil {
		return nil, tacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tacb.builders))
	nodes := make([]*TelegramAccount, len(tacb.builders))
	mutators := make([]Mutator, len(tacb.builders))
	for i := range tacb.builders {
		func(i int, root context.Context) {
			builder := tacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TelegramAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tacb *TelegramAccountCreateBulk) SaveX(ctx context.Context) []*TelegramAccount {
	v, err := tacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacb *TelegramAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := tacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacb *TelegramAccountCreateBulk) ExecX(ctx context.Context) {
	if err := tacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TelegramAccount.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TelegramAccountUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (tacb *TelegramAccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *TelegramAccountUpsertBulk {
	tacb.conflict = opts
	return &TelegramAccountUpsertBulk{
		create: tacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tacb *TelegramAccountCreateBulk) OnConflictColumns(columns ...string) *TelegramAccountUpsertBulk {
	tacb.conflict = append(tacb.conflict, sql.ConflictColumns(columns...))
	return &TelegramAccountUpsertBulk{
		create: tacb,
	}
}

// TelegramAccountUpsertBulk is the builder for "upsert"-ing
// a bulk of TelegramAccount nodes.
type TelegramAccountUpsertBulk struct {
	create *TelegramAccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(telegramaccount.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TelegramAccountUpsertBulk) UpdateNewValues() *TelegramAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(telegramaccount.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TelegramAccount.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TelegramAccountUpsertBulk) Ignore() *TelegramAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TelegramAccountUpsertBulk) DoNothing() *TelegramAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TelegramAccountCreateBulk.OnConflict
// documentation for more info.
func (u *TelegramAccountUpsertBulk) Update(set func(*TelegramAccountUpsert)) *TelegramAccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TelegramAccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCode sets the "code" field.
func (u *TelegramAccountUpsertBulk) SetCode(v string) *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TelegramAccountUpsertBulk) UpdateCode() *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateCode()
	})
}

// SetCodeAt sets the "code_at" field.
func (u *TelegramAccountUpsertBulk) SetCodeAt(v time.Time) *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetCodeAt(v)
	})
}

// UpdateCodeAt sets the "code_at" field to the value that was provided on create.
func (u *TelegramAccountUpsertBulk) UpdateCodeAt() *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateCodeAt()
	})
}

// SetData sets the "data" field.
func (u *TelegramAccountUpsertBulk) SetData(v []byte) *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *TelegramAccountUpsertBulk) UpdateData() *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateData()
	})
}

// SetState sets the "state" field.
func (u *TelegramAccountUpsertBulk) SetState(v telegramaccount.State) *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *TelegramAccountUpsertBulk) UpdateState() *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateState()
	})
}

// SetStatus sets the "status" field.
func (u *TelegramAccountUpsertBulk) SetStatus(v string) *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TelegramAccountUpsertBulk) UpdateStatus() *TelegramAccountUpsertBulk {
	return u.Update(func(s *TelegramAccountUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *TelegramAccountUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TelegramAccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TelegramAccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TelegramAccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
