// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/gotd/bot/internal/ent/predicate"
	"github.com/gotd/bot/internal/ent/telegramaccount"
)

// TelegramAccountUpdate is the builder for updating TelegramAccount entities.
type TelegramAccountUpdate struct {
	config
	hooks    []Hook
	mutation *TelegramAccountMutation
}

// Where appends a list predicates to the TelegramAccountUpdate builder.
func (tau *TelegramAccountUpdate) Where(ps ...predicate.TelegramAccount) *TelegramAccountUpdate {
	tau.mutation.Where(ps...)
	return tau
}

// SetCode sets the "code" field.
func (tau *TelegramAccountUpdate) SetCode(s string) *TelegramAccountUpdate {
	tau.mutation.SetCode(s)
	return tau
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tau *TelegramAccountUpdate) SetNillableCode(s *string) *TelegramAccountUpdate {
	if s != nil {
		tau.SetCode(*s)
	}
	return tau
}

// ClearCode clears the value of the "code" field.
func (tau *TelegramAccountUpdate) ClearCode() *TelegramAccountUpdate {
	tau.mutation.ClearCode()
	return tau
}

// SetCodeAt sets the "code_at" field.
func (tau *TelegramAccountUpdate) SetCodeAt(t time.Time) *TelegramAccountUpdate {
	tau.mutation.SetCodeAt(t)
	return tau
}

// SetNillableCodeAt sets the "code_at" field if the given value is not nil.
func (tau *TelegramAccountUpdate) SetNillableCodeAt(t *time.Time) *TelegramAccountUpdate {
	if t != nil {
		tau.SetCodeAt(*t)
	}
	return tau
}

// ClearCodeAt clears the value of the "code_at" field.
func (tau *TelegramAccountUpdate) ClearCodeAt() *TelegramAccountUpdate {
	tau.mutation.ClearCodeAt()
	return tau
}

// SetState sets the "state" field.
func (tau *TelegramAccountUpdate) SetState(t telegramaccount.State) *TelegramAccountUpdate {
	tau.mutation.SetState(t)
	return tau
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tau *TelegramAccountUpdate) SetNillableState(t *telegramaccount.State) *TelegramAccountUpdate {
	if t != nil {
		tau.SetState(*t)
	}
	return tau
}

// SetStatus sets the "status" field.
func (tau *TelegramAccountUpdate) SetStatus(s string) *TelegramAccountUpdate {
	tau.mutation.SetStatus(s)
	return tau
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tau *TelegramAccountUpdate) SetNillableStatus(s *string) *TelegramAccountUpdate {
	if s != nil {
		tau.SetStatus(*s)
	}
	return tau
}

// SetSessionData sets the "session_data" field.
func (tau *TelegramAccountUpdate) SetSessionData(b []byte) *TelegramAccountUpdate {
	tau.mutation.SetSessionData(b)
	return tau
}

// ClearSessionData clears the value of the "session_data" field.
func (tau *TelegramAccountUpdate) ClearSessionData() *TelegramAccountUpdate {
	tau.mutation.ClearSessionData()
	return tau
}

// Mutation returns the TelegramAccountMutation object of the builder.
func (tau *TelegramAccountUpdate) Mutation() *TelegramAccountMutation {
	return tau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tau *TelegramAccountUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tau.sqlSave, tau.mutation, tau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tau *TelegramAccountUpdate) SaveX(ctx context.Context) int {
	affected, err := tau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tau *TelegramAccountUpdate) Exec(ctx context.Context) error {
	_, err := tau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tau *TelegramAccountUpdate) ExecX(ctx context.Context) {
	if err := tau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tau *TelegramAccountUpdate) check() error {
	if v, ok := tau.mutation.State(); ok {
		if err := telegramaccount.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "TelegramAccount.state": %w`, err)}
		}
	}
	return nil
}

func (tau *TelegramAccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(telegramaccount.Table, telegramaccount.Columns, sqlgraph.NewFieldSpec(telegramaccount.FieldID, field.TypeString))
	if ps := tau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tau.mutation.Code(); ok {
		_spec.SetField(telegramaccount.FieldCode, field.TypeString, value)
	}
	if tau.mutation.CodeCleared() {
		_spec.ClearField(telegramaccount.FieldCode, field.TypeString)
	}
	if value, ok := tau.mutation.CodeAt(); ok {
		_spec.SetField(telegramaccount.FieldCodeAt, field.TypeTime, value)
	}
	if tau.mutation.CodeAtCleared() {
		_spec.ClearField(telegramaccount.FieldCodeAt, field.TypeTime)
	}
	if value, ok := tau.mutation.State(); ok {
		_spec.SetField(telegramaccount.FieldState, field.TypeEnum, value)
	}
	if value, ok := tau.mutation.Status(); ok {
		_spec.SetField(telegramaccount.FieldStatus, field.TypeString, value)
	}
	if value, ok := tau.mutation.SessionData(); ok {
		_spec.SetField(telegramaccount.FieldSessionData, field.TypeBytes, value)
	}
	if tau.mutation.SessionDataCleared() {
		_spec.ClearField(telegramaccount.FieldSessionData, field.TypeBytes)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tau.mutation.done = true
	return n, nil
}

// TelegramAccountUpdateOne is the builder for updating a single TelegramAccount entity.
type TelegramAccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelegramAccountMutation
}

// SetCode sets the "code" field.
func (tauo *TelegramAccountUpdateOne) SetCode(s string) *TelegramAccountUpdateOne {
	tauo.mutation.SetCode(s)
	return tauo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tauo *TelegramAccountUpdateOne) SetNillableCode(s *string) *TelegramAccountUpdateOne {
	if s != nil {
		tauo.SetCode(*s)
	}
	return tauo
}

// ClearCode clears the value of the "code" field.
func (tauo *TelegramAccountUpdateOne) ClearCode() *TelegramAccountUpdateOne {
	tauo.mutation.ClearCode()
	return tauo
}

// SetCodeAt sets the "code_at" field.
func (tauo *TelegramAccountUpdateOne) SetCodeAt(t time.Time) *TelegramAccountUpdateOne {
	tauo.mutation.SetCodeAt(t)
	return tauo
}

// SetNillableCodeAt sets the "code_at" field if the given value is not nil.
func (tauo *TelegramAccountUpdateOne) SetNillableCodeAt(t *time.Time) *TelegramAccountUpdateOne {
	if t != nil {
		tauo.SetCodeAt(*t)
	}
	return tauo
}

// ClearCodeAt clears the value of the "code_at" field.
func (tauo *TelegramAccountUpdateOne) ClearCodeAt() *TelegramAccountUpdateOne {
	tauo.mutation.ClearCodeAt()
	return tauo
}

// SetState sets the "state" field.
func (tauo *TelegramAccountUpdateOne) SetState(t telegramaccount.State) *TelegramAccountUpdateOne {
	tauo.mutation.SetState(t)
	return tauo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tauo *TelegramAccountUpdateOne) SetNillableState(t *telegramaccount.State) *TelegramAccountUpdateOne {
	if t != nil {
		tauo.SetState(*t)
	}
	return tauo
}

// SetStatus sets the "status" field.
func (tauo *TelegramAccountUpdateOne) SetStatus(s string) *TelegramAccountUpdateOne {
	tauo.mutation.SetStatus(s)
	return tauo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tauo *TelegramAccountUpdateOne) SetNillableStatus(s *string) *TelegramAccountUpdateOne {
	if s != nil {
		tauo.SetStatus(*s)
	}
	return tauo
}

// SetSessionData sets the "session_data" field.
func (tauo *TelegramAccountUpdateOne) SetSessionData(b []byte) *TelegramAccountUpdateOne {
	tauo.mutation.SetSessionData(b)
	return tauo
}

// ClearSessionData clears the value of the "session_data" field.
func (tauo *TelegramAccountUpdateOne) ClearSessionData() *TelegramAccountUpdateOne {
	tauo.mutation.ClearSessionData()
	return tauo
}

// Mutation returns the TelegramAccountMutation object of the builder.
func (tauo *TelegramAccountUpdateOne) Mutation() *TelegramAccountMutation {
	return tauo.mutation
}

// Where appends a list predicates to the TelegramAccountUpdate builder.
func (tauo *TelegramAccountUpdateOne) Where(ps ...predicate.TelegramAccount) *TelegramAccountUpdateOne {
	tauo.mutation.Where(ps...)
	return tauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tauo *TelegramAccountUpdateOne) Select(field string, fields ...string) *TelegramAccountUpdateOne {
	tauo.fields = append([]string{field}, fields...)
	return tauo
}

// Save executes the query and returns the updated TelegramAccount entity.
func (tauo *TelegramAccountUpdateOne) Save(ctx context.Context) (*TelegramAccount, error) {
	return withHooks(ctx, tauo.sqlSave, tauo.mutation, tauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tauo *TelegramAccountUpdateOne) SaveX(ctx context.Context) *TelegramAccount {
	node, err := tauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tauo *TelegramAccountUpdateOne) Exec(ctx context.Context) error {
	_, err := tauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tauo *TelegramAccountUpdateOne) ExecX(ctx context.Context) {
	if err := tauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tauo *TelegramAccountUpdateOne) check() error {
	if v, ok := tauo.mutation.State(); ok {
		if err := telegramaccount.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "TelegramAccount.state": %w`, err)}
		}
	}
	return nil
}

func (tauo *TelegramAccountUpdateOne) sqlSave(ctx context.Context) (_node *TelegramAccount, err error) {
	if err := tauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telegramaccount.Table, telegramaccount.Columns, sqlgraph.NewFieldSpec(telegramaccount.FieldID, field.TypeString))
	id, ok := tauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelegramAccount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telegramaccount.FieldID)
		for _, f := range fields {
			if !telegramaccount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telegramaccount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tauo.mutation.Code(); ok {
		_spec.SetField(telegramaccount.FieldCode, field.TypeString, value)
	}
	if tauo.mutation.CodeCleared() {
		_spec.ClearField(telegramaccount.FieldCode, field.TypeString)
	}
	if value, ok := tauo.mutation.CodeAt(); ok {
		_spec.SetField(telegramaccount.FieldCodeAt, field.TypeTime, value)
	}
	if tauo.mutation.CodeAtCleared() {
		_spec.ClearField(telegramaccount.FieldCodeAt, field.TypeTime)
	}
	if value, ok := tauo.mutation.State(); ok {
		_spec.SetField(telegramaccount.FieldState, field.TypeEnum, value)
	}
	if value, ok := tauo.mutation.Status(); ok {
		_spec.SetField(telegramaccount.FieldStatus, field.TypeString, value)
	}
	if value, ok := tauo.mutation.SessionData(); ok {
		_spec.SetField(telegramaccount.FieldSessionData, field.TypeBytes, value)
	}
	if tauo.mutation.SessionDataCleared() {
		_spec.ClearField(telegramaccount.FieldSessionData, field.TypeBytes)
	}
	_node = &TelegramAccount{config: tauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telegramaccount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tauo.mutation.done = true
	return _node, nil
}
